version: '3.7'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: findit
    ports:
      - '5432:5432'
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - production-network

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass RedisFindit
    ports:
      - '6379:6379'
    networks:
      - production-network

  node1:
    build:
      dockerfile: ./Dockerfile
      context: .
    container_name: node-1
    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - production-network
    ports:
      - '8080:8080'
    volumes:
      - ./uploads:/usr/app/uploads

  # node2:
  #   build:
  #     dockerfile: ./Dockerfile
  #     context: .
  #   image: uemurabruno/findit-backend
  #   container_name: node-2
  #   depends_on:
  #     - postgres
  #     - redis
  #     - mongo
  #   restart: always
  #   networks:
  #     - production-network
  #   ports:
  #     - "4000"
  #   volumes:
  #     - ./src/uploads:/usr/app/src/uploads

  # node3:
  #   build:
  #     dockerfile: ./Dockerfile
  #     context: .
  #   image: uemurabruno/findit-backend
  #   container_name: node-3
  #   depends_on:
  #     - postgres
  #     - redis
  #     - mongo
  #   restart: always
  #   networks:
  #     - production-network
  #   ports:
  #     - "4000"
  #   volumes:
  #     - ./src/uploads:/usr/app/src/uploads

  # nginx:
  #   build:
  #     dockerfile: ./docker/nginx.dockerfile
  #     context: .
  #   image: uemurabruno/nginx
  #   container_name: nginx
  #   ports:
  #     - "8080:80"
  #   networks:
  #     - production-network
  #   depends_on:
  #     - node1
  #     - node2
  #     - node3

networks:
  production-network:
    driver: bridge
